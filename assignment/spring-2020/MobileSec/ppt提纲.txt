目录
论文贡献
    1. 明确并克服在Android中有效使用SELinux的若干挑战
    2. 完整地将SELinux和中间件MAC整合到Android中
    3. 具体演示SELinux如何缓解实际的Android漏洞和app漏洞
    4. 将安全增强功能合并到由AOSP维护的Android平台中
背景
    DAC存在问题：
        1. DAC是粗粒度的防护
        2. DAC无法限制使用root或superuser身份的系统daemon和setuid程序
    SELinux优势：
        1. SELinux能够限制系统进程特权的滥用
        2. SELinux提供了比DAC更强大的机制来隔离和沙盒化Android应用程序
        3. SELinux提供了集中的策略配置，可以对其进行分析来找出潜在的信息流和特权提升路径
    //这篇论文的主要工作就是将SELinux的优势用到Android中
待解决问题
    内核
        1. SELinux要求文件系统提供对安全标签的支持。在Linux中，文件安全性标签的基础存储通常是通过使用文件上的扩展属性来提供的。但是，Android设备最初首选的文件系统类型是yaffs2文件系统，最初并不支持扩展属性。目前，yaffs2已经获得了对扩展属性的支持，但是仍然缺少对新创建文件的自动创建标记的必要支持。
        2. Android向Linux内核引入了许多新的内核子系统和驱动程序。这些子系统包括用于应用程序进程进行通信的新机制，例如Binder IPC机制和匿名共享内存（ashmem）机制，以及各种其他特定于Android的功能，例如Android日志记录和唤醒锁定机制。这些Android独有的内核子系统以前尚未针对SELinux进行过研究或测试，因此可能会导致应用程序间通信或特权接口完全不受SELinux控制。
    用户空间
        1. Android除了内核几乎所有东西都与典型的Linux发行版不同。之前将SELinux整合到用户空间的方式不能直接应用到Android中。
        2. SELinux通常在程序执行时执行自动安全上下文转换。原有的zygote模型并不能指定app的SELinux安全上下文。
    策略
        1. Android有自己独有的用户空间软件栈
        2. Android的文件系统布局和使用模型与传统Linux不同
        3. Linux参考策略太大，不适合资源有限的小型设备
        4. Linux参考策略要求发行商和用户根据情况制定策略，需要用户具有理解或编写策略的能力
系统实现
    内核支持
        文件系统支持
            为了提供完整的安全标签功能，论文对yaffs2 getxattr进行修改，并且实现了对在创建新yaffs2文件时自动设置安全标签的支持
        Android子系统支持
            Binder：定义新的LSM hook，并在bingder驱动中调用这些hook
            Ashmem：ashmem区域由open文件描述符表示并且由Linux的shmem对象支持，现有的SELinux足够提供对读写的基本控制
    用户空间支持:在Android中使SELinux对用户空间的支持需要大范围对各种软件组件进行修改，包括Android C库的实现、文件系统生成工具、向上贯穿Android框架服务的init程序
        1. Android C库和动态链接器支持
            SELinux用户空间代码广泛使用Linux扩展属性系统调用获取和设置文件安全性标签，因此必须首先扩展Android的C库实现
            在linker添加AT_SECURE，Linux内核提供此标志来通知用户空间是否发生了安全上下文切换
        2. SELinux库和工具移植
            移植核心SELinux用户空间库和工具到Android，libselinux
            使libsepol和SELinux policy编译器适配MacOS X
            整合SELinux utilities的功能作为init的built-in命令
        3. 给文件添加安全标签
            拓展mkyaffs2image和make_ext4fs这两个Android文件系统镜像生成工具支持文件安全标签的生成
            拓展Android recovery控制台和升级程序保证从recovery控制台生成的新文件也带有安全标签
        4. init程序
            扩展了Android的init程序，在启动期间执行init.rc文件中的任何命令之前提早加载SELinux策略，并且扩展了ueventd程序以根据策略标记设备节点
        5. app安全标签。拓展Dalvik VM使得它能给子进程设置SELinux安全上下文在Dalvik VM对子进程进行设置部分插入了一个hook，用于调用libselinux库的一个新接口
        Security Server：
            PackageManagerService & installed：设置app数据目录的安全上下文
            Zygote：设置进程的安全上下文
            init：设置系统属性的安全上下文
    配置策略
        SELinux策略配置
            重新定制Android用户空间软件栈策略配置策略的TE部分来定义系统daemon和app的域配置策略的MLS部分使不同app进程和文件相互隔离采用了在内核层建立一个小而固定策略集的方式，这种方式不需要app开发者编写策略和DAC一样，这种方式的MAC一样不可见
         安全上下文定义：
            app进程：mac_permissions.xml
            app数据文件：seapp_contexts
            系统文件：file_contexts
            系统属性：property_contexts
安全性分析
    SE Android的内核层MAC提供了一种有效的方法来防止应用程序的权限升级和防止应用程序通过内核级接口共享未经授权的数据。同时提供了确保更高级别的安全功能不被绕过和被app篡改。
    威胁：
        SEAndroid威胁：
            1. SEAndroid不能缓解策略允许的所有事情（SEAndroid不能缓解能通过策略检查的安全问题）（SEAndroid不能缓解能通过策略检查的攻击）
            2. SEAndroid是一种内核级别的安全机制，不能缓解内核漏洞
            3. SEAndroid不能解决来自其他平台组件的威胁，特别是那些能直接访问内存和存储器之类的系统组件
损耗分析
    对镜像大小的影响
        system镜像大小SELinux相对增长了0.07%，recovery镜像大小的增长与boot镜像的类似
    性能测试
        AnTuTu性能测试
            AOSP和SEAndroid上都运行了200次
        Softweg性能测试
